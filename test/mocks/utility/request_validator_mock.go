// Code generated by MockGen. DO NOT EDIT.
// Source: ./utility/request_validator.go

// Package mock_utility is a generated GoMock package.
package mock_utility

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRequestValidatorUtil is a mock of RequestValidatorUtil interface
type MockRequestValidatorUtil struct {
	ctrl     *gomock.Controller
	recorder *MockRequestValidatorUtilMockRecorder
}

// MockRequestValidatorUtilMockRecorder is the mock recorder for MockRequestValidatorUtil
type MockRequestValidatorUtilMockRecorder struct {
	mock *MockRequestValidatorUtil
}

// NewMockRequestValidatorUtil creates a new mock instance
func NewMockRequestValidatorUtil(ctrl *gomock.Controller) *MockRequestValidatorUtil {
	mock := &MockRequestValidatorUtil{ctrl: ctrl}
	mock.recorder = &MockRequestValidatorUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestValidatorUtil) EXPECT() *MockRequestValidatorUtilMockRecorder {
	return m.recorder
}

// IsValidRequest mocks base method
func (m *MockRequestValidatorUtil) IsValidRequest(merchantId, tenantId, channelId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidRequest", merchantId, tenantId, channelId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidRequest indicates an expected call of IsValidRequest
func (mr *MockRequestValidatorUtilMockRecorder) IsValidRequest(merchantId, tenantId, channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidRequest", reflect.TypeOf((*MockRequestValidatorUtil)(nil).IsValidRequest), merchantId, tenantId, channelId)
}

// IsValidUUID mocks base method
func (m *MockRequestValidatorUtil) IsValidUUID(uuid string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidUUID", uuid)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidUUID indicates an expected call of IsValidUUID
func (mr *MockRequestValidatorUtilMockRecorder) IsValidUUID(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidUUID", reflect.TypeOf((*MockRequestValidatorUtil)(nil).IsValidUUID), uuid)
}

// GenerateRedisKey mocks base method
func (m *MockRequestValidatorUtil) GenerateRedisKey(merchantId, tenantId, channelId string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRedisKey", merchantId, tenantId, channelId)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRedisKey indicates an expected call of GenerateRedisKey
func (mr *MockRequestValidatorUtilMockRecorder) GenerateRedisKey(merchantId, tenantId, channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRedisKey", reflect.TypeOf((*MockRequestValidatorUtil)(nil).GenerateRedisKey), merchantId, tenantId, channelId)
}
