// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/repository/module_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	enum "flow/enum"
	model "flow/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockModuleRepository is a mock of ModuleRepository interface
type MockModuleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockModuleRepositoryMockRecorder
}

// MockModuleRepositoryMockRecorder is the mock recorder for MockModuleRepository
type MockModuleRepositoryMockRecorder struct {
	mock *MockModuleRepository
}

// NewMockModuleRepository creates a new mock instance
func NewMockModuleRepository(ctrl *gomock.Controller) *MockModuleRepository {
	mock := &MockModuleRepository{ctrl: ctrl}
	mock.recorder = &MockModuleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModuleRepository) EXPECT() *MockModuleRepositoryMockRecorder {
	return m.recorder
}

// FetchModuleFromModuleVersion mocks base method
func (m *MockModuleRepository) FetchModuleFromModuleVersion(completeModuleVersionNumberList map[int]bool) []model.ModuleVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchModuleFromModuleVersion", completeModuleVersionNumberList)
	ret0, _ := ret[0].([]model.ModuleVersion)
	return ret0
}

// FetchModuleFromModuleVersion indicates an expected call of FetchModuleFromModuleVersion
func (mr *MockModuleRepositoryMockRecorder) FetchModuleFromModuleVersion(completeModuleVersionNumberList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchModuleFromModuleVersion", reflect.TypeOf((*MockModuleRepository)(nil).FetchModuleFromModuleVersion), completeModuleVersionNumberList)
}

// FetchModuleVersions mocks base method
func (m *MockModuleRepository) FetchModuleVersions(moduleStatus enum.Status, moduleVersionNumbers []int) []model.ModuleVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchModuleVersions", moduleStatus, moduleVersionNumbers)
	ret0, _ := ret[0].([]model.ModuleVersion)
	return ret0
}

// FetchModuleVersions indicates an expected call of FetchModuleVersions
func (mr *MockModuleRepositoryMockRecorder) FetchModuleVersions(moduleStatus, moduleVersionNumbers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchModuleVersions", reflect.TypeOf((*MockModuleRepository)(nil).FetchModuleVersions), moduleStatus, moduleVersionNumbers)
}
