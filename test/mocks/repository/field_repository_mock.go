// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/repository/field_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	enum "flow/enum"
	model "flow/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFieldRepository is a mock of FieldRepository interface
type MockFieldRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFieldRepositoryMockRecorder
}

// MockFieldRepositoryMockRecorder is the mock recorder for MockFieldRepository
type MockFieldRepositoryMockRecorder struct {
	mock *MockFieldRepository
}

// NewMockFieldRepository creates a new mock instance
func NewMockFieldRepository(ctrl *gomock.Controller) *MockFieldRepository {
	mock := &MockFieldRepository{ctrl: ctrl}
	mock.recorder = &MockFieldRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFieldRepository) EXPECT() *MockFieldRepositoryMockRecorder {
	return m.recorder
}

// FetchFieldFromFieldVersion mocks base method
func (m *MockFieldRepository) FetchFieldFromFieldVersion(completeFieldVersionNumberList map[int]bool) []model.FieldVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFieldFromFieldVersion", completeFieldVersionNumberList)
	ret0, _ := ret[0].([]model.FieldVersion)
	return ret0
}

// FetchFieldFromFieldVersion indicates an expected call of FetchFieldFromFieldVersion
func (mr *MockFieldRepositoryMockRecorder) FetchFieldFromFieldVersion(completeFieldVersionNumberList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFieldFromFieldVersion", reflect.TypeOf((*MockFieldRepository)(nil).FetchFieldFromFieldVersion), completeFieldVersionNumberList)
}

// FetchFieldVersions mocks base method
func (m *MockFieldRepository) FetchFieldVersions(fieldStatus enum.Status, fieldVersionNumbers []int) []model.FieldVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFieldVersions", fieldStatus, fieldVersionNumbers)
	ret0, _ := ret[0].([]model.FieldVersion)
	return ret0
}

// FetchFieldVersions indicates an expected call of FetchFieldVersions
func (mr *MockFieldRepositoryMockRecorder) FetchFieldVersions(fieldStatus, fieldVersionNumbers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFieldVersions", reflect.TypeOf((*MockFieldRepository)(nil).FetchFieldVersions), fieldStatus, fieldVersionNumbers)
}
